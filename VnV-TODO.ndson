{"task":"Numeric validation of hypergeometric closed-form SU(2) 3nj","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_generating_functional import generate_3nj\nfrom project.su2_3nj_closed_form import closed_form_3nj\n# test sample values\nfor js in [(1,1,1,1,1,1),(2,2,2,2,2,2),(1,2,3,4,5,6)]:\n    num = generate_3nj(*js)\n    cf = closed_form_3nj(*js)\n    assert sp.simplify(num - cf) == 0, f\"Mismatch for {js}\""}
{"task":"Regression test against reference hypergeometric data","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import json\nfrom project.su2_3nj_closed_form import closed_form_3nj\nwith open('tests/reference_3nj_closed_form.json') as f:\n    ref = json.load(f)\nfor key, val in ref.items():\n    js = list(map(int, key.split(',')))\n    assert closed_form_3nj(*js) == val, f\"Ref mismatch for {js}\""}
{"task":"Symmetry relation checks for closed-form representation","priority":"Medium","python_snippet":"import sympy as sp\nfrom project.su2_3nj_closed_form import closed_form_3nj\njs = [1,2,3,4,5,6]\na = closed_form_3nj(*js)\nb = closed_form_3nj(js[1],js[0],js[2],js[3],js[5],js[4])\nassert sp.simplify(a - b) == 0, \"Symmetry violation\""}
{"task":"Domain validation of hypergeometric parameters","priority":"Low","python_snippet":"from project.su2_3nj_closed_form import closed_form_3nj\n\ndef safe_eval(params):\n    try:\n        closed_form_3nj(*params)\n        return True\n    except Exception:\n        return False\n\n# test boundary and half-integer cases\ncases = [(0,0,0,0,0,0),(1,1,1,1,1,1),(sp.Rational(1,2),sp.Rational(1,2),1,sp.Rational(1,2),sp.Rational(1,2),1)]\nfor c in cases:\n    assert safe_eval(c), f\"Domain error for {c}\""}
{"task":"Performance benchmark vs generating functional","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import time\nfrom project.su2_3nj_generating_functional import generate_3nj\nfrom project.su2_3nj_closed_form import closed_form_3nj\njs = (10,10,10,10,10,10)\n# measure generating-functional\nt0 = time.time(); generate_3nj(*js); t1 = time.time() - t0\n# measure closed-form\nt0 = time.time(); closed_form_3nj(*js); t2 = time.time() - t0\nassert t2 < t1, f\"Closed-form slower ({t2:.4f}s) >= generating ({t1:.4f}s)\""}
{"task":"Recursion relation cross-check for closed form","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_closed_form import closed_form_3nj\nfrom project.su2_3nj_generating_functional import recursion_3nj\njs = [1,2,3,4,5,6]\nval_dir = closed_form_3nj(*js)\nval_rec = recursion_3nj(*js)\nassert sp.simplify(val_dir - val_rec) == 0, \"Recursion mismatch\""}
