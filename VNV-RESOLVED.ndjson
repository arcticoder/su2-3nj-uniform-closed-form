{"task":"Numeric validation of hypergeometric closed-form SU(2) 3nj","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_generating_functional import generate_3nj\nfrom project.su2_3nj_closed_form import closed_form_3nj\n# test sample values\nfor js in [(1,1,1,1,1,1),(2,2,2,2,2,2),(1,2,3,4,5,6)]:\n    num = generate_3nj(*js)\n    cf = closed_form_3nj(*js)\n    assert sp.simplify(num - cf) == 0, f\"Mismatch for {js}\""}
{"task":"Regression test against reference hypergeometric data","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import json\nfrom project.su2_3nj_closed_form import closed_form_3nj\nwith open('tests/reference_3nj_closed_form.json') as f:\n    ref = json.load(f)\nfor key, val in ref.items():\n    js = list(map(int, key.split(',')))\n    assert closed_form_3nj(*js) == val, f\"Ref mismatch for {js}\""}